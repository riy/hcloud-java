import org.gradle.testing.jacoco.tasks.JacocoCoverageVerification
import java.text.SimpleDateFormat

buildscript {
	repositories {
        mavenCentral()
        maven {
            name 'Gradle Plugins'
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name 'Spring Plugins'
            url 'https://repo.spring.io/plugins-release'
        }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.1'
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'findbugs'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.8.0'
    id 'com.gorylenko.gradle-git-properties' version '1.4.20'
}

repositories {
    mavenCentral()
}

description = 'Java wrapper for the Hetzner Cloud API'
version = '0.1-SNAPSHOT'
buildDir = 'target'
sourceCompatibility = 1.8

ext {
	springVersion = '5.0.3.RELEASE'
    commonsLangVersion = '3.7'
    jacksonDatatypeJsr310Version = '2.9.3'
	slf4jVersion = '1.7.25'
    assertjVersion = '3.9.0'
    logbackVersion = '1.2.3'
    lombokVersion = '1.16.20'
    checkstyleVersion = '7.8.2'
    pmdVersion= '5.5.2'
    findbugsVersion = '3.0.1'
    jacocoVersion = '0.7.9'

    buildDate = new SimpleDateFormat("dd.MM.yyyy HH:mm").format(new Date())
    gitRepositoryUrl = 'https://github.com/riy/hetzner-cloud-api.git'
    configDir = "${project.projectDir}/etc/config"
}

sourceSets {
    generated
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

dependencies {
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeJsr310Version}"
    compile "ch.qos.logback:logback-core:${logbackVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"

    testCompile 'junit:junit:4.12'
    testCompile "ch.qos.logback:logback-core:${logbackVersion}"
    testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile 'junit:junit:4.12'
    testCompile "org.skyscreamer:jsonassert:1.5.0"
    testCompile "org.projectlombok:lombok:${lombokVersion}"

    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
}

clean {
    delete file('coverage')
    delete file('reports')
}

task failIfGitNotClean {
    doLast {
        def grgit = org.ajoberstar.grgit.Grgit.open(project.file('.'))
        def status = grgit.status()
        if (!status.isClean()) {
            throw new GradleException('There are some un-committed files in this project.\nStaged changes: ' + status.staged.allChanges + '.\nUnstaged changes: ' + status.unstaged.allChanges)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "ISO-8859-1"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

gitProperties {
    gitPropertiesDir = sourceSets.generated.resources.sourceDirectories.singleFile
}

processGeneratedResources.dependsOn generateGitProperties

jar {
    baseName = 'hetzner-cloud-api'
    from sourceSets.generated.output
}

checkstyle {
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile = file("${project.configDir}/checkstyle/checkstyle.xml")
    configProperties = ['suppressionFile': "${project.configDir}/checkstyle/suppressions.xml"]
    ignoreFailures = false
}


// fail on checkstyle warnings, see https://github.com/gradle/gradle/issues/881
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

pmd {
    toolVersion = pmdVersion
    sourceSets = [sourceSets.main, sourceSets.test]
    ruleSets = []
    ruleSetFiles = files("${project.configDir}/pmd/ruleset.xml")
    rulePriority = 4
}

findbugs {
    toolVersion = findbugsVersion // manually uploaded to K+N Enterprise Repository
    sourceSets = [sourceSets.main, sourceSets.test]
    effort = 'default'
    reportLevel = 'high'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Test).each { test ->
    test.logging.captureStandardOutput LogLevel.INFO
    test.testLogging {
        showStandardStreams = false // Set 'true' to see more output during tests
        exceptionFormat "full"
    }
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files).asFileTree.matching {
            exclude '**/*$CoverageProblem*'
        }
    }
    doFirst {
        if (!gradle.taskGraph.hasTask(test)) {
            throw new StopExecutionException()
        }
    }
}

jacocoTestReport.dependsOn test
test.finalizedBy jacocoTestReport

def relativeJacocoCoverageReportDir = '/reports/jacoco/test'
// TODO REMOVE def jacocoCoverageReportDir = "${buildDir}${relativeJacocoCoverageReportDir}"

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

task coverage {
    dependsOn test, jacocoTestCoverageVerification
}

spotless {
    // automatically format source files, see https://github.com/diffplug/spotless
    java {
        importOrderFile rootProject.file("${project.configDir}/ide/hetzner-cloud-api.importorder")
        eclipse().configFile rootProject.file("${project.configDir}/ide/eclipse_formatter.xml")
        target 'src/main/**/*.java', 'src/test/**/*.java'
    }
}
